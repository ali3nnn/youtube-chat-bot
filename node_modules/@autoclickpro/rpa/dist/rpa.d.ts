import { Key, Point } from "@nut-tree/nut-js";
import { Box, IconName, QueryOption } from "./type";
/**
 * wait for the text to appear
 * @param text
 */
export declare function createRpa({ dbg }?: {
    dbg?: boolean | undefined;
}): {
    clickText(text: string, option?: QueryOption): Promise<void>;
    clickIcon(iconName: IconName, option?: QueryOption): Promise<void>;
    hasText(text: string, option?: QueryOption): Promise<boolean>;
    clickBox(box: Box, option?: {
        pos: "center" | "leftCenter";
    }): Promise<void>;
    click(point: Point): Promise<void>;
    hasIcon(iconName: IconName, option?: QueryOption): Promise<boolean>;
    typewrite(text: string): Promise<void>;
    clear(): Promise<void>;
    pressKey(...keys: Key[]): Promise<void>;
    ocr({ inPane }: QueryOption): Promise<{
        box: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        text: string;
        confidence: number;
    }[]>;
    scroll(step: "pageDown" | "pageUp" | "toBottom" | "toTop" | {
        x: number;
        y: number;
    }): Promise<void>;
};
export declare const rpa: {
    clickText(text: string, option?: QueryOption): Promise<void>;
    clickIcon(iconName: IconName, option?: QueryOption): Promise<void>;
    hasText(text: string, option?: QueryOption): Promise<boolean>;
    clickBox(box: Box, option?: {
        pos: "center" | "leftCenter";
    }): Promise<void>;
    click(point: Point): Promise<void>;
    hasIcon(iconName: IconName, option?: QueryOption): Promise<boolean>;
    typewrite(text: string): Promise<void>;
    clear(): Promise<void>;
    pressKey(...keys: Key[]): Promise<void>;
    ocr({ inPane }: QueryOption): Promise<{
        box: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        text: string;
        confidence: number;
    }[]>;
    scroll(step: "pageDown" | "pageUp" | "toBottom" | "toTop" | {
        x: number;
        y: number;
    }): Promise<void>;
};
